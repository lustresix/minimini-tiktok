// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	userservice "mini-min-tiktok/kitex_gen/userservice"
)

func serviceInfo() *kitex.ServiceInfo {
	return userserviceServiceInfo
}

var userserviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Userservice"
	handlerType := (*userservice.Userservice)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":     kitex.NewMethodInfo(registerHandler, newUserserviceRegisterArgs, newUserserviceRegisterResult, false),
		"Login":        kitex.NewMethodInfo(loginHandler, newUserserviceLoginArgs, newUserserviceLoginResult, false),
		"FollowerList": kitex.NewMethodInfo(followerListHandler, newUserserviceFollowerListArgs, newUserserviceFollowerListResult, false),
		"FriendList":   kitex.NewMethodInfo(friendListHandler, newUserserviceFriendListArgs, newUserserviceFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserserviceRegisterArgs)
	realResult := result.(*userservice.UserserviceRegisterResult)
	success, err := handler.(userservice.Userservice).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserserviceRegisterArgs() interface{} {
	return userservice.NewUserserviceRegisterArgs()
}

func newUserserviceRegisterResult() interface{} {
	return userservice.NewUserserviceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserserviceLoginArgs)
	realResult := result.(*userservice.UserserviceLoginResult)
	success, err := handler.(userservice.Userservice).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserserviceLoginArgs() interface{} {
	return userservice.NewUserserviceLoginArgs()
}

func newUserserviceLoginResult() interface{} {
	return userservice.NewUserserviceLoginResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserserviceFollowerListArgs)
	realResult := result.(*userservice.UserserviceFollowerListResult)
	success, err := handler.(userservice.Userservice).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserserviceFollowerListArgs() interface{} {
	return userservice.NewUserserviceFollowerListArgs()
}

func newUserserviceFollowerListResult() interface{} {
	return userservice.NewUserserviceFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserserviceFriendListArgs)
	realResult := result.(*userservice.UserserviceFriendListResult)
	success, err := handler.(userservice.Userservice).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserserviceFriendListArgs() interface{} {
	return userservice.NewUserserviceFriendListArgs()
}

func newUserserviceFriendListResult() interface{} {
	return userservice.NewUserserviceFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *userservice.UserRegisterReq) (r *userservice.UserRegisterResp, err error) {
	var _args userservice.UserserviceRegisterArgs
	_args.Req = req
	var _result userservice.UserserviceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *userservice.UserLoginReq) (r *userservice.UserLoginResp, err error) {
	var _args userservice.UserserviceLoginArgs
	_args.Req = req
	var _result userservice.UserserviceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *userservice.RelationFollowerListReq) (r *userservice.RelationFollowerListResp, err error) {
	var _args userservice.UserserviceFollowerListArgs
	_args.Req = req
	var _result userservice.UserserviceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *userservice.RelationFriendListReq) (r *userservice.RelationFriendListResp, err error) {
	var _args userservice.UserserviceFriendListArgs
	_args.Req = req
	var _result userservice.UserserviceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
